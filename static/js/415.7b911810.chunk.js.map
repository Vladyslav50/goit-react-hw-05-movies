{"version":3,"file":"static/js/415.7b911810.chunk.js","mappings":"sMAEaA,E,OAAOC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gwB,SCChBC,EAAa,SAAHC,GAAoB,IAAdC,EAAMD,EAANC,OACrBC,EAAYC,MAAMC,QAAQH,IAAWA,EAAOI,OAG5CC,GAAWC,EAAAA,EAAAA,MACjB,OACEC,EAAAA,EAAAA,KAACb,EAAI,CAAAc,SACFP,GACCD,EAAOS,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAOC,EAAWH,EAAXG,YAAW,OAClCN,EAAAA,EAAAA,KAAA,MAAIO,UAAU,aAAYN,UACxBO,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CACHF,UAAU,aACVG,MAAO,CAAEC,KAAMb,GACfc,GAAE,WAAAC,OAAaT,GAAKH,SAAA,EAEpBD,EAAAA,EAAAA,KAAA,OACEO,UAAU,YACVO,IACER,EAAW,mCAAAO,OAC4BP,GAhBrD,0EAmBYS,MAAO,IACPC,IAAI,YAENhB,EAAAA,EAAAA,KAAA,KAAGO,UAAU,QAAON,SAAEI,QAhBMD,EAkB3B,KAIf,C,0HCGA,UA/Ba,WACX,IAAAa,GAAoCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAChCI,GAAkCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAkBtB,OAhBAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,eAAAxC,GAAAyC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAED,OAFCF,EAAAC,KAAA,EAEpBb,GAAa,GAAMY,EAAAE,KAAA,GACAC,EAAAA,EAAAA,MAAa,KAAD,EAAzBL,EAAIE,EAAAI,KACJL,EAAYD,EAAKO,QACvBrB,EAAce,GAAWC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEzBR,EAASQ,EAAAM,GAAMC,SAAS,QAEJ,OAFIP,EAAAC,KAAA,GAExBb,GAAa,GAAOY,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAZ,EAAA,wBAEvB,kBAXoB,OAAA3C,EAAAwD,MAAA,KAAAC,UAAA,KAYrBjB,GACF,GAAG,KAGDxB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,YAAWN,SAAA,EACxBD,EAAAA,EAAAA,KAAA,MAAIO,UAAU,aAAYN,SAAC,mBAC1BwB,IAAazB,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,IACpBrB,IAAS7B,EAAAA,EAAAA,KAACmD,EAAAA,EAAY,CAACN,QAAShB,IAChCR,IAAcrB,EAAAA,EAAAA,KAACT,EAAAA,EAAU,CAACE,OAAQ4B,MAGzC,C","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 20px;\n  width: 1280px;\n  padding-right: 24px;\n  padding-left: 24px;\n  margin: 0 auto;\n  list-style: none;\n\n  .movie-item {\n    width: calc((100% - 80px) / 5);\n    border-radius: 4px;\n    box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n      0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n    transition: scale 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n    > a {\n      text-decoration: none;\n    }\n  }\n  .movie-item:hover {\n    scale: 1.03;\n  }\n\n  .movie-img {\n    width: 100%;\n    height: auto;\n    object-fit: cover;\n    border-radius: 4px 4px 0 0;\n  }\n\n  .title {\n    padding: 0 5px;\n    font-weight: 500;\n    color: #010101;\n  }\n`;\n","import { Link, useLocation } from 'react-router-dom';\nimport { List } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const getMovies = Array.isArray(movies) && movies.length;\n  const defaultImg =\n    'https://i.pinimg.com/564x/00/59/57/005957e914d39cf6497fa6d778c02b7c.jpg';\n  const location = useLocation();\n  return (\n    <List>\n      {getMovies &&\n        movies.map(({ id, title, poster_path }) => (\n          <li className=\"movie-item\" key={id}>\n            <Link\n              className=\"movie-link\"\n              state={{ from: location }}\n              to={`/movies/${id}`}\n            >\n              <img\n                className=\"movie-img\"\n                src={\n                  poster_path\n                    ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                    : defaultImg\n                }\n                width={250}\n                alt=\"poster\"\n              />\n              <p className=\"title\">{title}</p>\n            </Link>\n          </li>\n        ))}\n    </List>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { fetchFilms } from '../services/api';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport Loader from '../components/Loader/Loader';\nimport { ErrorMessage } from '../components/ErrorMessage/ErrorMessage';\n\nconst Home = () => {\n  const [trendFilms, setTrendFilms] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchTrendFilms = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchFilms();\n        const filmsData = data.results;\n        setTrendFilms(filmsData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrendFilms();\n  }, []);\n\n  return (\n    <div className=\"home-page\">\n      <h1 className=\"main-title\">Trending today</h1>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {trendFilms && <MoviesList movies={trendFilms} />}\n    </div>\n  );\n};\n\nexport default Home;\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","MoviesList","_ref","movies","getMovies","Array","isArray","length","location","useLocation","_jsx","children","map","_ref2","id","title","poster_path","className","_jsxs","Link","state","from","to","concat","src","width","alt","_useState","useState","_useState2","_slicedToArray","trendFilms","setTrendFilms","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","error","setError","useEffect","fetchTrendFilms","_asyncToGenerator","_regeneratorRuntime","_callee","data","filmsData","_context","prev","next","fetchFilms","sent","results","t0","message","finish","stop","apply","arguments","Loader","ErrorMessage"],"sourceRoot":""}